package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;

parser code  {:
	private Lexer lexer;
	public boolean printTokens;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token)s;
		System.out.println("Line " + tok.getLine() + ": Syntax error; unexpected " + tok.getValue());
	}
	
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	
	if (printTokens) {
		System.out.println(t.getLine() + ":" + t);
	}
	
	return t; 
:};

/* Terminals (tokens returned by the scanner). */
terminal 			LP, RP, LB, RB, LCBR, RCBR;
terminal			GT, LT, GTE, LTE, LAND, LOR, EQUAL, NEQUAL, LNEG;
terminal			PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal			INT, BOOLEAN, STRING, TRUE, FALSE;
terminal			THIS, EXTENDS, STATIC, VOID, RETURN, IF, ELSE, WHILE, BREAK, CONTINUE, NEW, LENGTH, CLASS, NULL;
terminal			COMMA, DOT, SEMI, ASSIGN;
terminal Integer	INTEGER;
terminal String		QUOTE, ID, CLASS_ID;
terminal 			UMINUS;

/* Non-terminals */
non terminal ICClass			libic;
non terminal List<Method> 		libmethods;
non terminal LibraryMethod		libmethod;
non terminal List<Formal>		Formals;
non terminal Type				Type;

/* The grammar */
libic ::= CLASS CLASS_ID:classID LCBR libmethods:libmethods RCBR
	{: RESULT = new ICClass(classIDleft, classID, new ArrayList<Field>(), libmethods); :}
	| error SEMI
;

libmethods ::= libmethods:libmethods libmethod:libmethod
	{: libmethods.add(libmethod);
	   RESULT = libmethods;
	 :}
	| libmethod:libmethod
	{: List<Method> libmethods = new ArrayList<Method>();
	   libmethods.add(libmethod);
	   RESULT = libmethods; 
	 :}
;

libmethod ::= STATIC Type:type ID:id LP Formals:formals RP SEMI
	{: RESULT = new LibraryMethod(type, id, formals); :}
	| STATIC VOID ID:id LP Formals:formals RP SEMI
	{: RESULT = new LibraryMethod(new PrimitiveType(idleft, DataTypes.VOID), id, formals); :}
	| error SEMI
;

Formals ::= Type:type ID:id
	{: List<Formal> formals = new ArrayList<Formal>();
	   formals.add(new Formal(type, id)); 
	   RESULT =  formals; 
	 :}
	| Formals:formals COMMA Type:type ID:id
	{: formals.add(new Formal(type, id));
	   RESULT = formals;
	 :}
	|
	{: RESULT = new ArrayList<Formal>(); :}
	| error SEMI
;

Type ::= INT:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.INT); :}
	| BOOLEAN:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.BOOLEAN); :}
	| STRING:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.STRING); :}
	| Type:t LB RB
	{: t.incrementDimension();
	   RESULT = t;
	 :}
;