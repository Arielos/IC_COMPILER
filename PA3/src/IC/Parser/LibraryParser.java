//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 24 17:47:44 IST 2015
//----------------------------------------------------

package IC.Parser;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;
import IC.DataTypes;
import IC.AST.Field;
import IC.AST.Formal;
import IC.AST.ICClass;
import IC.AST.LibraryMethod;
import IC.AST.Method;
import IC.AST.PrimitiveType;
import IC.AST.Type;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Tue Mar 24 17:47:44 IST 2015
 */
public class LibraryParser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public LibraryParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public LibraryParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public LibraryParser(java_cup.runtime.Scanner s,
			java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\020\000\002\002\007\000\002\002\004\000\002\002"
			+ "\004\000\002\003\004\000\002\003\003\000\002\004\011"
			+ "\000\002\004\011\000\002\004\004\000\002\005\004\000"
			+ "\002\005\006\000\002\005\002\000\002\005\004\000\002"
			+ "\006\003\000\002\006\003\000\002\006\003\000\002\006" + "\005" });

	/** Access to production table. */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\047\000\006\003\004\051\005\001\002\000\004\055"
			+ "\051\001\002\000\004\062\010\001\002\000\004\002\007"
			+ "\001\002\000\004\002\000\001\002\000\004\010\011\001"
			+ "\002\000\006\003\013\037\014\001\002\000\010\003\013"
			+ "\011\047\037\014\001\002\000\004\055\046\001\002\000"
			+ "\012\030\022\031\021\032\016\040\020\001\002\000\010"
			+ "\003\ufffd\011\ufffd\037\ufffd\001\002\000\006\006\ufff3\061"
			+ "\ufff3\001\002\000\006\006\035\061\041\001\002\000\004"
			+ "\061\023\001\002\000\006\006\ufff4\061\ufff4\001\002\000"
			+ "\006\006\ufff5\061\ufff5\001\002\000\004\004\024\001\002"
			+ "\000\016\003\026\005\ufff7\030\022\031\021\032\016\053"
			+ "\ufff7\001\002\000\006\006\035\061\040\001\002\000\004"
			+ "\055\037\001\002\000\006\005\031\053\030\001\002\000"
			+ "\010\030\022\031\021\032\016\001\002\000\004\055\032"
			+ "\001\002\000\010\003\ufffb\011\ufffb\037\ufffb\001\002\000"
			+ "\006\006\035\061\034\001\002\000\006\005\ufff8\053\ufff8"
			+ "\001\002\000\004\007\036\001\002\000\006\006\ufff2\061"
			+ "\ufff2\001\002\000\006\005\ufff6\053\ufff6\001\002\000\006"
			+ "\005\ufff9\053\ufff9\001\002\000\004\004\042\001\002\000"
			+ "\016\003\026\005\ufff7\030\022\031\021\032\016\053\ufff7"
			+ "\001\002\000\006\005\044\053\030\001\002\000\004\055"
			+ "\045\001\002\000\010\003\ufffc\011\ufffc\037\ufffc\001\002"
			+ "\000\010\003\ufffa\011\ufffa\037\ufffa\001\002\000\004\002"
			+ "\001\001\002\000\010\003\ufffe\011\ufffe\037\ufffe\001\002"
			+ "\000\004\002\uffff\001\002" });

	/** Access to parse-action table. */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\047\000\004\002\005\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\003\011\004\014\001\001\000\004\004"
			+ "\047\001\001\000\002\001\001\000\004\006\016\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\005\026\006\024\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\004\006\032"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\005\042\006\024\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$LibraryParser$actions action_obj;

	/** Action encapsulation object initializer. */
	@Override
	protected void init_actions() {
		action_obj = new CUP$LibraryParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@Override
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$LibraryParser$do_action(act_num, parser, stack,
				top);
	}

	/** Indicates start state. */
	@Override
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	@Override
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	@Override
	public int error_sym() {
		return 1;
	}

	/** Scan to get the next Symbol. */
	@Override
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		Token t = lexer.next_token();

		if (printTokens) {
			System.out.println(t.getLine() + ":" + t);
		}

		return t;

	}

	private Lexer lexer;
	public boolean printTokens;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	@Override
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()
				+ ": Syntax error; unexpected " + tok.getValue());
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$LibraryParser$actions {
	private final LibraryParser parser;

	/** Constructor */
	CUP$LibraryParser$actions(LibraryParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$LibraryParser$do_action(
			int CUP$LibraryParser$act_num,
			java_cup.runtime.lr_parser CUP$LibraryParser$parser,
			java.util.Stack CUP$LibraryParser$stack, int CUP$LibraryParser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$LibraryParser$result;

		/* select the action based on the action number */
		switch (CUP$LibraryParser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // Type ::= Type LB RB
		{
			Type RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).right;
			Type t = (Type) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).value;
			t.incrementDimension();
			RESULT = t;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Type",
					4,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // Type ::= STRING
		{
			Type RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			Object t = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			RESULT = new PrimitiveType(tleft, DataTypes.STRING);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Type", 4,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // Type ::= BOOLEAN
		{
			Type RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			Object t = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			RESULT = new PrimitiveType(tleft, DataTypes.BOOLEAN);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Type", 4,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // Type ::= INT
		{
			Type RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			Object t = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			RESULT = new PrimitiveType(tleft, DataTypes.INT);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Type", 4,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // Formals ::= error SEMI
		{
			List<Formal> RESULT = null;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Formals",
					3,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // Formals ::=
		{
			List<Formal> RESULT = null;
			RESULT = new ArrayList<Formal>();
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Formals", 3,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // Formals ::= Formals COMMA Type ID
		{
			List<Formal> RESULT = null;
			int formalsleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).left;
			int formalsright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).right;
			List<Formal> formals = (List<Formal>) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).right;
			Type type = (Type) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			formals.add(new Formal(type, id));
			RESULT = formals;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Formals",
					3,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 3)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // Formals ::= Type ID
		{
			List<Formal> RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).right;
			Type type = (Type) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			List<Formal> formals = new ArrayList<Formal>();
			formals.add(new Formal(type, id));
			RESULT = formals;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"Formals",
					3,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // libmethod ::= error SEMI
		{
			LibraryMethod RESULT = null;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libmethod",
					2,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // libmethod ::= STATIC VOID ID LP Formals RP SEMI
		{
			LibraryMethod RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).value;
			int formalsleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).left;
			int formalsright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).right;
			List<Formal> formals = (List<Formal>) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).value;
			RESULT = new LibraryMethod(
					new PrimitiveType(idleft, DataTypes.VOID), id, formals);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libmethod",
					2,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 6)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // libmethod ::= STATIC Type ID LP Formals RP SEMI
		{
			LibraryMethod RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 5)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 5)).right;
			Type type = (Type) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 5)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).right;
			String id = (String) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 4)).value;
			int formalsleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).left;
			int formalsright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).right;
			List<Formal> formals = (List<Formal>) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 2)).value;
			RESULT = new LibraryMethod(type, id, formals);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libmethod",
					2,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 6)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // libmethods ::= libmethod
		{
			List<Method> RESULT = null;
			int libmethodleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int libmethodright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			LibraryMethod libmethod = (LibraryMethod) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			List<Method> libmethods = new ArrayList<Method>();
			libmethods.add(libmethod);
			RESULT = libmethods;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libmethods", 1,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // libmethods ::= libmethods libmethod
		{
			List<Method> RESULT = null;
			int libmethodsleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).left;
			int libmethodsright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).right;
			List<Method> libmethods = (List<Method>) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).value;
			int libmethodleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).left;
			int libmethodright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).right;
			LibraryMethod libmethod = (LibraryMethod) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.peek()).value;
			libmethods.add(libmethod);
			RESULT = libmethods;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libmethods",
					1,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // libic ::= error SEMI
		{
			ICClass RESULT = null;

			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libic",
					0,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= libic EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).right;
			ICClass start_val = (ICClass) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).value;
			RESULT = start_val;
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"$START",
					0,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			/* ACCEPT */
			CUP$LibraryParser$parser.done_parsing();
			return CUP$LibraryParser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // libic ::= CLASS CLASS_ID LCBR libmethods RCBR
		{
			ICClass RESULT = null;
			int classIDleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).left;
			int classIDright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).right;
			String classID = (String) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 3)).value;
			int libmethodsleft = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).left;
			int libmethodsright = ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).right;
			List<Method> libmethods = (List<Method>) ((java_cup.runtime.Symbol) CUP$LibraryParser$stack
					.elementAt(CUP$LibraryParser$top - 1)).value;
			RESULT = new ICClass(classIDleft, classID, new ArrayList<Field>(),
					libmethods);
			CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol(
					"libic",
					0,
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack
							.elementAt(CUP$LibraryParser$top - 4)),
					((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()),
					RESULT);
		}
			return CUP$LibraryParser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
