/* The following code was generated by JFlex 1.6.0 */

package IC.Parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/LiorAr/Documents/Java SE Eclipse Projects/PA1/src/IC/Parser/IC.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SINGLE_LINE_COMMENT = 2;
  public static final int MULTI_LINE_COMMENT = 4;
  public static final int IN_QUOTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\2\0\1\62\22\0\1\1\1\16\1\34\2\0"+
    "\1\14\1\21\1\0\1\23\1\24\1\11\1\12\1\31\1\13\1\32"+
    "\1\7\1\3\11\5\1\0\1\33\1\20\1\15\1\17\2\0\32\6"+
    "\1\25\1\61\1\26\1\0\1\4\1\0\1\43\1\50\1\45\1\41"+
    "\1\35\1\55\1\53\1\57\1\44\1\2\1\60\1\51\1\2\1\40"+
    "\1\47\2\2\1\52\1\42\1\37\1\54\1\46\1\56\1\36\2\2"+
    "\1\27\1\22\1\30\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\14\3\1\2\1\31\1\2\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\10\3\1\47\11\3"+
    "\1\50\1\51\1\52\1\53\4\3\1\54\3\3\1\55"+
    "\12\3\1\56\1\57\1\60\1\61\4\3\1\62\12\3"+
    "\1\63\1\3\1\64\2\3\1\65\1\66\1\3\1\67"+
    "\1\70\2\3\1\71\1\72\1\73\1\3\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\314\0\314\0\314\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\314\0\314\0\u05fa\0\u062d\0\314"+
    "\0\314\0\u0660\0\u0693\0\u0165\0\u06c6\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0132\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\314"+
    "\0\314\0\314\0\314\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0132"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0132\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0132\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u0132\0\u1089\0\u0132\0\u10bc\0\u10ef\0\u0132\0\u0132"+
    "\0\u1122\0\u0132\0\u0132\0\u1155\0\u1188\0\u0132\0\u0132\0\u0132"+
    "\0\u11bb\0\u0132\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\6\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\7\1\41"+
    "\1\42\1\7\1\43\1\7\1\44\1\45\1\46\1\7"+
    "\1\47\1\50\1\51\2\7\1\52\1\53\2\7\1\5"+
    "\1\6\10\54\1\55\63\54\1\56\51\54\10\57\1\60"+
    "\23\57\1\61\24\57\1\62\1\60\64\0\1\6\6\0"+
    "\1\6\51\0\1\6\2\0\5\7\26\0\24\7\4\0"+
    "\1\63\1\64\1\0\1\65\1\63\26\0\24\63\4\0"+
    "\1\63\1\11\1\0\1\11\1\63\26\0\24\63\4\0"+
    "\5\12\26\0\24\12\11\0\1\66\1\0\1\67\60\0"+
    "\1\5\70\0\1\70\62\0\1\71\62\0\1\72\62\0"+
    "\1\73\66\0\1\74\63\0\1\75\42\0\5\7\26\0"+
    "\1\7\1\76\12\7\1\77\7\7\4\0\5\7\26\0"+
    "\15\7\1\100\4\7\1\101\1\7\4\0\5\7\26\0"+
    "\1\102\16\7\1\103\4\7\4\0\5\7\26\0\2\7"+
    "\1\104\21\7\4\0\5\7\26\0\3\7\1\105\14\7"+
    "\1\106\3\7\4\0\5\7\26\0\12\7\1\107\1\7"+
    "\1\110\7\7\4\0\5\7\26\0\12\7\1\111\11\7"+
    "\4\0\5\7\26\0\12\7\1\112\2\7\1\113\6\7"+
    "\4\0\5\7\26\0\1\114\23\7\4\0\5\7\26\0"+
    "\1\115\23\7\4\0\5\7\26\0\6\7\1\116\15\7"+
    "\4\0\5\7\26\0\22\7\1\117\1\7\11\0\1\55"+
    "\53\0\10\57\1\0\23\57\1\0\24\57\36\0\1\120"+
    "\2\0\1\121\1\122\20\0\1\123\3\0\1\63\3\0"+
    "\1\63\26\0\24\63\4\0\1\63\1\65\1\0\1\65"+
    "\1\63\26\0\24\63\4\0\5\7\26\0\2\7\1\124"+
    "\21\7\4\0\5\7\26\0\5\7\1\125\16\7\4\0"+
    "\5\7\26\0\17\7\1\126\4\7\4\0\5\7\26\0"+
    "\7\7\1\127\14\7\4\0\5\7\26\0\21\7\1\130"+
    "\2\7\4\0\5\7\26\0\14\7\1\131\7\7\4\0"+
    "\5\7\26\0\6\7\1\132\6\7\1\133\6\7\4\0"+
    "\5\7\26\0\2\7\1\134\21\7\4\0\5\7\26\0"+
    "\3\7\1\135\20\7\4\0\5\7\26\0\6\7\1\136"+
    "\15\7\4\0\5\7\26\0\7\7\1\137\14\7\4\0"+
    "\5\7\26\0\12\7\1\140\11\7\4\0\5\7\26\0"+
    "\1\141\23\7\4\0\5\7\26\0\3\7\1\142\20\7"+
    "\4\0\5\7\26\0\2\7\1\143\21\7\4\0\5\7"+
    "\26\0\14\7\1\144\7\7\4\0\5\7\26\0\7\7"+
    "\1\145\14\7\4\0\5\7\26\0\1\146\23\7\4\0"+
    "\5\7\26\0\1\147\23\7\4\0\5\7\26\0\1\150"+
    "\23\7\4\0\5\7\26\0\5\7\1\151\16\7\4\0"+
    "\5\7\26\0\14\7\1\152\7\7\4\0\5\7\26\0"+
    "\2\7\1\153\21\7\4\0\5\7\26\0\7\7\1\154"+
    "\14\7\4\0\5\7\26\0\2\7\1\155\21\7\4\0"+
    "\5\7\26\0\5\7\1\156\16\7\4\0\5\7\26\0"+
    "\4\7\1\157\17\7\4\0\5\7\26\0\14\7\1\160"+
    "\7\7\4\0\5\7\26\0\6\7\1\161\15\7\4\0"+
    "\5\7\26\0\16\7\1\162\5\7\4\0\5\7\26\0"+
    "\17\7\1\163\4\7\4\0\5\7\26\0\5\7\1\164"+
    "\16\7\4\0\5\7\26\0\14\7\1\165\7\7\4\0"+
    "\5\7\26\0\3\7\1\166\20\7\4\0\5\7\26\0"+
    "\7\7\1\167\14\7\4\0\5\7\26\0\3\7\1\170"+
    "\20\7\4\0\5\7\26\0\7\7\1\171\14\7\4\0"+
    "\5\7\26\0\5\7\1\172\16\7\4\0\5\7\26\0"+
    "\1\173\23\7\4\0\5\7\26\0\23\7\1\174\4\0"+
    "\5\7\26\0\2\7\1\175\21\7\4\0\5\7\26\0"+
    "\15\7\1\176\6\7\4\0\5\7\26\0\1\177\23\7"+
    "\4\0\5\7\26\0\1\200\23\7\4\0\5\7\26\0"+
    "\4\7\1\201\17\7\4\0\5\7\26\0\10\7\1\202"+
    "\13\7\4\0\5\7\26\0\16\7\1\203\5\7\4\0"+
    "\5\7\26\0\3\7\1\204\20\7\4\0\5\7\26\0"+
    "\6\7\1\205\15\7\4\0\5\7\26\0\22\7\1\206"+
    "\1\7\4\0\5\7\26\0\3\7\1\207\20\7\4\0"+
    "\5\7\26\0\5\7\1\210\16\7\4\0\5\7\26\0"+
    "\17\7\1\211\4\7\4\0\5\7\26\0\3\7\1\212"+
    "\20\7\4\0\5\7\26\0\1\213\23\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\7\1\3\11\6\1\12\11\14\1\2\11"+
    "\2\1\2\11\1\0\1\1\1\0\1\1\10\11\22\1"+
    "\4\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private StringBuffer string = new StringBuffer();
	
	public int getLineNumber() { return yyline + 1; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public Token next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new LexicalError("Token recognition error", yyline, yycolumn);
          }
        case 62: break;
        case 2: 
          { 
          }
        case 63: break;
        case 3: 
          { return new Token(sym.ID, "ID", yytext(), yyline, yycolumn);
          }
        case 64: break;
        case 4: 
          { try {
								int num = Integer.parseInt(yytext());
								return new Token(sym.INTEGER, "INTEGER", num, yyline, yycolumn);
							} catch (NumberFormatException ex) {
								throw new LexicalError("Number format exception", yyline, yycolumn);
							}
          }
        case 65: break;
        case 5: 
          { return new Token(sym.CLASS_ID, "CLASS_ID", yytext(), yyline, yycolumn);
          }
        case 66: break;
        case 6: 
          { return new Token(sym.DIVIDE, yytext(), yyline, yycolumn);
          }
        case 67: break;
        case 7: 
          { return new Token(sym.MULTIPLY, yytext(), yyline, yycolumn);
          }
        case 68: break;
        case 8: 
          { return new Token(sym.PLUS, yytext(), yyline, yycolumn);
          }
        case 69: break;
        case 9: 
          { return new Token(sym.MINUS, yytext(), yyline, yycolumn);
          }
        case 70: break;
        case 10: 
          { return new Token(sym.MOD, yytext(), yyline, yycolumn);
          }
        case 71: break;
        case 11: 
          { return new Token(sym.ASSIGN, yytext(), yyline, yycolumn);
          }
        case 72: break;
        case 12: 
          { return new Token(sym.LNEG, yytext(), yyline, yycolumn);
          }
        case 73: break;
        case 13: 
          { return new Token(sym.GT, yytext(), yyline, yycolumn);
          }
        case 74: break;
        case 14: 
          { return new Token(sym.LT, yytext(), yyline, yycolumn);
          }
        case 75: break;
        case 15: 
          { return new Token(sym.LP, yytext(), yyline, yycolumn);
          }
        case 76: break;
        case 16: 
          { return new Token(sym.RP, yytext(), yyline, yycolumn);
          }
        case 77: break;
        case 17: 
          { return new Token(sym.LB, yytext(), yyline, yycolumn);
          }
        case 78: break;
        case 18: 
          { return new Token(sym.RB, yytext(), yyline, yycolumn);
          }
        case 79: break;
        case 19: 
          { return new Token(sym.LCBR, yytext(), yyline, yycolumn);
          }
        case 80: break;
        case 20: 
          { return new Token(sym.RCBR, yytext(), yyline, yycolumn);
          }
        case 81: break;
        case 21: 
          { return new Token(sym.COMMA, yytext(), yyline, yycolumn);
          }
        case 82: break;
        case 22: 
          { return new Token(sym.DOT, yytext(), yyline, yycolumn);
          }
        case 83: break;
        case 23: 
          { return new Token(sym.SEMI, yytext(), yyline, yycolumn);
          }
        case 84: break;
        case 24: 
          { string.setLength(0); yybegin(IN_QUOTE);
          }
        case 85: break;
        case 25: 
          { yybegin(YYINITIAL);
          }
        case 86: break;
        case 26: 
          { char[] quote = yytext().toCharArray();
							for (char c : quote) {
								if ((c >= 32) && (c <= 126)) {
									string.append(c);
							  	} else {
									throw new LexicalError("illegal character '" + c + "'", yyline, yycolumn);
							  	}
						  	}
          }
        case 87: break;
        case 27: 
          { throw new LexicalError("String must close quote before end of line", yyline);
          }
        case 88: break;
        case 28: 
          { yybegin(YYINITIAL); return new Token(sym.QUOTE, "QUOTE", string.toString(), yyline, yycolumn);
          }
        case 89: break;
        case 29: 
          { throw new LexicalError("Invalid identifier or class name", yyline, yycolumn);
          }
        case 90: break;
        case 30: 
          { throw new LexicalError("Number format exception", yyline, yycolumn);
          }
        case 91: break;
        case 31: 
          { yybegin(SINGLE_LINE_COMMENT);
          }
        case 92: break;
        case 32: 
          { yybegin(MULTI_LINE_COMMENT);
          }
        case 93: break;
        case 33: 
          { return new Token(sym.EQUAL, yytext(), yyline, yycolumn);
          }
        case 94: break;
        case 34: 
          { return new Token(sym.NEQUAL, yytext(), yyline, yycolumn);
          }
        case 95: break;
        case 35: 
          { return new Token(sym.GTE, yytext(), yyline, yycolumn);
          }
        case 96: break;
        case 36: 
          { return new Token(sym.LTE, yytext(), yyline, yycolumn);
          }
        case 97: break;
        case 37: 
          { return new Token(sym.LAND, yytext(), yyline, yycolumn);
          }
        case 98: break;
        case 38: 
          { return new Token(sym.LOR, yytext(), yyline, yycolumn);
          }
        case 99: break;
        case 39: 
          { return new Token(sym.IF, yytext(), yyline, yycolumn);
          }
        case 100: break;
        case 40: 
          { string.append("\\\"");
          }
        case 101: break;
        case 41: 
          { string.append("\\t");
          }
        case 102: break;
        case 42: 
          { string.append("\\n");
          }
        case 103: break;
        case 43: 
          { string.append("\\\\");
          }
        case 104: break;
        case 44: 
          { return new Token(sym.NEW, yytext(), yyline, yycolumn);
          }
        case 105: break;
        case 45: 
          { return new Token(sym.INT, yytext(), yyline, yycolumn);
          }
        case 106: break;
        case 46: 
          { return new Token(sym.ELSE, yytext(), yyline, yycolumn);
          }
        case 107: break;
        case 47: 
          { return new Token(sym.TRUE, yytext(), yyline, yycolumn);
          }
        case 108: break;
        case 48: 
          { return new Token(sym.THIS, yytext(), yyline, yycolumn);
          }
        case 109: break;
        case 49: 
          { return new Token(sym.NULL, yytext(), yyline, yycolumn);
          }
        case 110: break;
        case 50: 
          { return new Token(sym.VOID, yytext(), yyline, yycolumn);
          }
        case 111: break;
        case 51: 
          { return new Token(sym.CLASS, yytext(), yyline, yycolumn);
          }
        case 112: break;
        case 52: 
          { return new Token(sym.BREAK, yytext(), yyline, yycolumn);
          }
        case 113: break;
        case 53: 
          { return new Token(sym.FALSE, yytext(), yyline, yycolumn);
          }
        case 114: break;
        case 54: 
          { return new Token(sym.WHILE, yytext(), yyline, yycolumn);
          }
        case 115: break;
        case 55: 
          { return new Token(sym.STATIC, yytext(), yyline, yycolumn);
          }
        case 116: break;
        case 56: 
          { return new Token(sym.STRING, yytext(), yyline, yycolumn);
          }
        case 117: break;
        case 57: 
          { return new Token(sym.LENGTH, yytext(), yyline, yycolumn);
          }
        case 118: break;
        case 58: 
          { return new Token(sym.RETURN, yytext(), yyline, yycolumn);
          }
        case 119: break;
        case 59: 
          { return new Token(sym.EXTENDS, yytext(), yyline, yycolumn);
          }
        case 120: break;
        case 60: 
          { return new Token(sym.BOOLEAN, yytext(), yyline, yycolumn);
          }
        case 121: break;
        case 61: 
          { return new Token(sym.CONTINUE, yytext(), yyline, yycolumn);
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT: {
              throw new LexicalError("Unclosed comment");
            }
            case 140: break;
            default:
              { 	return new Token(sym.EOF, yytext(), yyline, yycolumn);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
