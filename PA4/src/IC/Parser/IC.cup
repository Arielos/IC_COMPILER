package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;

parser code  {:
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token)s;
		System.out.println("Line " + tok.getLine() + ": Syntax error, unexpected " + tok.getValue());
	}
	
:}

/* Terminals (tokens returned by the scanner). */
terminal 			LP, RP, LB, RB, LCBR, RCBR;
terminal			GT, LT, GTE, LTE, LAND, LOR, EQUAL, NEQUAL, LNEG;
terminal			PLUS, MINUS, MULTIPLY, DIVIDE, MOD;
terminal			INT, BOOLEAN, STRING, TRUE, FALSE;
terminal			THIS, EXTENDS, STATIC, VOID, RETURN, IF, ELSE, WHILE, BREAK, CONTINUE, NEW, LENGTH, CLASS, NULL;
terminal			COMMA, DOT, SEMI, ASSIGN;
terminal Integer	INTEGER;
terminal String		QUOTE, ID, CLASS_ID;
terminal 			UMINUS;

/* Non-terminals */
non terminal Program			Program;
non terminal ICClass			ClassDecl;
non terminal List<ICClass>		ClassesDecl;
non terminal FieldOrMethod		FieldsOrMethods;
non terminal List<Field>		Fields;
non terminal List<String>		IDs;
non terminal Method				Method;
non terminal List<Formal>		Formals;
non terminal Type				Type;
non terminal Statement			Statement;
non terminal Statement			StatementCon;
non terminal List<Statement> 	Statements;
non terminal Location			Location;
non terminal Expression			Expression;
non terminal List<Expression> 	Arguments;
non terminal Call				Call;
non terminal StaticCall			StaticCall;
non terminal VirtualCall		VirtualCall;
non terminal BinaryOp			BinOp;
non terminal UnaryOp			UnOp;
non terminal Literal			Literal;

/* Precedences */
precedence right ASSIGN;
precedence left ID;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left LT, LTE, GT, GTE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left LB, RB, LP, RP, DOT;
precedence left IF, ELSE;

/* The grammar */
Program ::= ClassesDecl:classes
	{: RESULT = new Program(classes); :}
	| error
;

ClassesDecl ::= ClassDecl:classDecl
    {:  List<ICClass> classesList = new ArrayList<ICClass>();
        classesList.add(classDecl);
        RESULT = classesList;
     :}
    | ClassesDecl:classesList ClassDecl:classDecl
    {: classesList.add(classDecl);
       RESULT = classesList;
     :}
;
	
ClassDecl ::= CLASS CLASS_ID:classID EXTENDS CLASS_ID:extendsID LCBR FieldsOrMethods:fieldsOrMethods RCBR
	{: RESULT = new ICClass(classIDleft, classID, extendsID, fieldsOrMethods.getFields(), fieldsOrMethods.getMethods()); :}
	| CLASS CLASS_ID:classID EXTENDS CLASS_ID:extendsID LCBR RCBR
	{: RESULT = new ICClass(classIDleft, classID, extendsID, new ArrayList<Field>(), new ArrayList<Method>()); :}
	| CLASS CLASS_ID:classID LCBR RCBR
	{: RESULT = new ICClass(classIDleft, classID, new ArrayList<Field>(), new ArrayList<Method>()); :}
	| CLASS CLASS_ID:classID LCBR FieldsOrMethods:fieldsOrMethods RCBR
	{: RESULT = new ICClass(classIDleft, classID, fieldsOrMethods.getFields(), fieldsOrMethods.getMethods()); :}
;

FieldsOrMethods ::= Fields:fields
	{: FieldOrMethod fieldOrMethod = new FieldOrMethod(fieldsleft);
	   fieldOrMethod.addFields(fields);
	   RESULT = fieldOrMethod;
	 :}
	| Method:method
	{: FieldOrMethod fieldOrMethod = new FieldOrMethod(methodleft);
	   fieldOrMethod.addMethod(method);
	   RESULT = fieldOrMethod;
	 :}
	| FieldsOrMethods:fieldsOrMethods Fields:fields
	{: fieldsOrMethods.addFields(fields);
	   RESULT = fieldsOrMethods;
	 :}
	| FieldsOrMethods:fieldsOrMethods Method:method
	{: fieldsOrMethods.addMethod(method);
	   RESULT = fieldsOrMethods;
	 :}
;

Fields ::= Type:type IDs:ids SEMI
	{: List<Field> fieldsList = new ArrayList<Field>();
	   for (String id : ids) {
	   		fieldsList.add(new Field(type, id));
       } 
       RESULT = fieldsList;
	 :}
	| error SEMI
;

IDs ::= ID:id
    {: List<String> idsList = new ArrayList<String>();
        idsList.add(id);
        RESULT = idsList;
	 :}
    | IDs:ids COMMA ID:id
    {: ids.add(id);
        RESULT = ids;
     :}
;

Method ::= STATIC Type:type ID:id LP Formals:formals RP LCBR Statements:stmts RCBR
	{: RESULT = new StaticMethod(type, id, formals, stmts); :}
	| STATIC Type:type ID:id LP RP LCBR Statements:stmts RCBR
	{: RESULT = new StaticMethod(type, id, new ArrayList<Formal>(), stmts); :}
	| STATIC VOID ID:id LP Formals:formals RP LCBR Statements:stmts RCBR
	{: RESULT = new StaticMethod(new PrimitiveType(idleft, DataTypes.VOID), id, formals, stmts); :}
	| STATIC VOID ID:id LP RP LCBR Statements:stmts RCBR
	{: RESULT = new StaticMethod(new PrimitiveType(idleft, DataTypes.VOID), id, new ArrayList<Formal>(), stmts); :}
	| Type:type ID:id LP Formals:formals RP LCBR Statements:stmts RCBR
	{: RESULT = new VirtualMethod(type, id, formals, stmts); :}
	| Type:type ID:id LP RP LCBR Statements:stmts RCBR
	{: RESULT = new VirtualMethod(type, id, new ArrayList<Formal>(), stmts); :}
	| VOID ID:id LP Formals:formals RP LCBR Statements:stmts RCBR
	{: RESULT = new VirtualMethod(new PrimitiveType(idleft, DataTypes.VOID), id, formals, stmts); :}
	| VOID ID:id LP RP LCBR Statements:stmts RCBR
	{: RESULT = new VirtualMethod(new PrimitiveType(idleft, DataTypes.VOID), id, new ArrayList<Formal>(), stmts); :}
	| error
;

Formals ::= Type:type ID:id
	{: List<Formal> formalsList = new ArrayList<Formal>();
	   formalsList.add(new Formal(type, id));
	   RESULT = formalsList; 
	 :}
	| Formals:formals COMMA Type:type ID:id
	{: formals.add(new Formal(type, id));
	   RESULT = formals;
	 :}
;

Type ::= INT:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.INT); :}
	| BOOLEAN:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.BOOLEAN); :}
	| STRING:t
	{: RESULT = new PrimitiveType(tleft, DataTypes.STRING); :}
	| CLASS_ID:t
	{: RESULT = new UserType(tleft, t); :}
	| Type:t LB RB
	{: t.incrementDimension();
	   RESULT = t;
	 :}
;

Statements ::= Statements:stmts Statement:stmt
	{: 	stmts.add(stmt);
		RESULT = stmts;
	 :}
	| {: RESULT = new ArrayList<Statement>(); :}
	| Statements:stmts error
;

Statement ::= Type:type ID:id SEMI
	{: RESULT = new LocalVariable(type, id); :}
	| Type:type ID:id ASSIGN Expression:expr SEMI
	{: RESULT = new LocalVariable(type, id, expr); :}
	| StatementCon:stmt
	{: RESULT = stmt; :}
	| error SEMI
;

StatementCon ::= Location:loc ASSIGN Expression:expr SEMI
	{: RESULT = new Assignment(loc, expr); :}
	| Call:call SEMI
	{: RESULT = new CallStatement(call); :}
	| RETURN:ret Expression:expr SEMI
	{: RESULT = new Return(retleft, expr); :}
	| RETURN:ret SEMI
	{: RESULT = new Return(retleft); :}
	| IF LP Expression:expr RP StatementCon:stmt
	{: RESULT = new If(expr, stmt); :}
	| IF LP Expression:expr RP StatementCon:stmt ELSE StatementCon:elseStmt
	{: RESULT = new If(expr, stmt, elseStmt); :}
	| WHILE LP Expression:expr RP StatementCon:stmt
	{: RESULT = new While(expr, stmt); :}
	| BREAK:brk SEMI
	{: RESULT = new Break(brkleft); :}
	| CONTINUE:cont SEMI
	{: RESULT = new Continue(contleft); :}
	| LCBR Statements:stmts RCBR
	{: RESULT = new StatementsBlock(stmtsleft, stmts); :}
;

Expression ::= Location:loc
	{: RESULT = loc; :}
	| Call:Call
	{: RESULT = Call; :}
	| THIS:ths
	{: RESULT = new This(thsleft); :}
	| NEW CLASS_ID:classID LP RP
	{: RESULT = new NewClass(classIDleft, classID); :}
	| NEW Type:type LB Expression:expr RB
	{: NewArray arr = new NewArray(type, expr);
        type.incrementDimension();
        RESULT = arr;
	 :}
	| Expression:expr DOT LENGTH
	{: RESULT = new Length(expr); :}
	| BinOp:binOp
	{: RESULT = binOp; :}
	| UnOp:unOp
	{: RESULT = unOp; :}
	| Literal:lit
	{: RESULT = lit; :}
	| LP Expression:expr RP
	{: RESULT = expr; :}
;

Call ::= StaticCall:staticCall
	{: RESULT = staticCall;	:}
	| VirtualCall:virtualCall
	{: RESULT = virtualCall; :}
;

StaticCall ::= CLASS_ID:classID DOT ID:id LP RP
	{: RESULT = new StaticCall(classIDleft, classID, id, new ArrayList<Expression>()); :}
	| CLASS_ID:classID DOT ID:id LP Arguments:args RP
	{: RESULT = new StaticCall(classIDleft, classID, id, args); :}
;

VirtualCall ::= ID:id LP RP
    {: RESULT = new VirtualCall(idleft, id, new ArrayList<Expression>()); :}
    | Expression:expr DOT ID:id LP RP
    {: RESULT = new VirtualCall(exprleft, expr, id, new ArrayList<Expression>()); :}
    | ID:id LP Arguments:args RP
    {: RESULT = new VirtualCall(idleft, id, args); :}
    | Expression:expr DOT ID:id LP Arguments:args RP
    {: RESULT = new VirtualCall(exprleft, expr, id, args); :}
;

Arguments ::= Expression:expr
	{: List<Expression> args = new ArrayList<Expression>();
	   args.add(expr);
	   RESULT = args;	
	 :}
	| Arguments:args COMMA Expression:expr
	{: args.add(expr);
	   RESULT = args;
	 :}
;

Location ::= ID:id
    {: RESULT = new VariableLocation(idleft, id); :}
    | Expression:expr DOT ID:id
    {: RESULT = new VariableLocation(exprleft, expr, id); :}
    | Expression:expr1 LB Expression:expr2 RB
    {: RESULT = new ArrayLocation(expr1, expr2); :}
;

BinOp ::= Expression:expr1 PLUS Expression:expr2
	{: RESULT = new MathBinaryOp(expr1, BinaryOps.PLUS, expr2); :}
	| Expression:expr1 MINUS Expression:expr2
	{: RESULT = new MathBinaryOp(expr1, BinaryOps.MINUS, expr2); :}
	| Expression:expr1 MULTIPLY Expression:expr2
	{: RESULT = new MathBinaryOp(expr1, BinaryOps.MULTIPLY, expr2); :}
	| Expression:expr1 DIVIDE Expression:expr2
	{: RESULT = new MathBinaryOp(expr1, BinaryOps.DIVIDE, expr2); :}
	| Expression:expr1 MOD Expression:expr2
	{: RESULT = new MathBinaryOp(expr1, BinaryOps.MOD, expr2); :}
	| Expression:expr1 LAND Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.LAND, expr2); :}
	| Expression:expr1 LOR Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.LOR, expr2); :}
	| Expression:expr1 LT Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.LT, expr2); :}
	| Expression:expr1 GT Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.GT, expr2); :}
	| Expression:expr1 LTE Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.LTE, expr2); :}
	| Expression:expr1 GTE Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.GTE, expr2); :}
	| Expression:expr1 EQUAL Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.EQUAL, expr2); :}
	| Expression:expr1 NEQUAL Expression:expr2
	{: RESULT = new LogicalBinaryOp(expr1, BinaryOps.NEQUAL, expr2); :}
;

UnOp ::= MINUS Expression:expr
	{: RESULT = new MathUnaryOp(UnaryOps.UMINUS, expr); :} %prec UMINUS
	| LNEG Expression:expr
	{: RESULT = new LogicalUnaryOp(UnaryOps.LNEG, expr); :}
	| MINUS error
	| LNEG error
;

Literal ::= INTEGER:lit
    {: RESULT = new Literal(litleft, LiteralTypes.INTEGER, lit); :}
    | QUOTE:lit
    {: RESULT = new Literal(litleft, LiteralTypes.STRING, lit); :}
    | TRUE:lit
    {: RESULT = new Literal(litleft, LiteralTypes.TRUE); :}
    | FALSE:lit
    {: RESULT = new Literal(litleft, LiteralTypes.FALSE); :}
    | NULL:lit
    {: RESULT = new Literal(litleft, LiteralTypes.NULL); :}
;